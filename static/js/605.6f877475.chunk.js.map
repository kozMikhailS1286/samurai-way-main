{"version":3,"file":"static/js/605.6f877475.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileInfo/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3wciT\"};","import React, {useEffect, useState} from \"react\"\r\n\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    setProfileStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.setProfileStatus(status)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}> {props.status || \"Enter your status\"} </span>\r\n                </div>}\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>}\r\n        </div>)\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import s from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/store\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n// import ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    setProfileStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                {props.profile.photos.large ? <img src={props.profile.photos.large}/> : 'Нет фото'}\r\n                <ProfileStatusWithHooks status={props.status}\r\n                                updateStatus={props.updateStatus}\r\n                               setProfileStatus={props.setProfileStatus}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Qkg42\"};","import s from './Post.module.css';\r\n\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://cdn1.flamp.ru/489671bbc112e7621d7d9f013bbb8a49_100_100.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span> like </span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__q4d-u\",\"posts\":\"MyPosts_posts__aTeRb\"};","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.css'\r\nimport {PostType} from '../../../redux/store'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/required\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\ntype MyPostType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: (newMessagePost: string) => void\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\n\r\n// Но с коннектом в Реакт Мемо нет необходимости, т.к. это в этом случае делает сам Реакт.\r\n\r\nconst MyPosts = React.memo((props: MyPostType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let addPost = (values: any) => {\r\n        props.addPost(values.newMessagePost);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3> My posts </h3>\r\n\r\n            <AddMyPostFormRedux onSubmit={addPost}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst AddMyPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newMessagePost\" component={Textarea} placeholder=\"Enter your post message\"\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button> Add post </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm({form: \"postAddMessageForm\"})(AddMyPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//\r\n//                     let addPost = () => {\r\n//                         store.dispatch(addPostAC());\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = changeNewTextAC(text)\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts updateNewPostText={onPostChange}\r\n//                              addPost={addPost}\r\n//                              posts={store.getState().profilePage.posts}\r\n//                              newPostText={store.getState().profilePage.newPostText}\r\n//                     /> }\r\n//                 }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n// Все выше переделано на тоже самое, что ниже:\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newMessagePost: string) => {\r\n            dispatch(addPostAC(newMessagePost));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = compose<React.FC>(connect(mapStateToProps, mapDispatchToProps))(MyPosts)\r\n\r\nexport default MyPostsContainer;","import ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {ProfileType} from '../../redux/store';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    setProfileStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo    profile={props.profile}\r\n                            status={props.status}\r\n                            updateStatus={props.updateStatus}\r\n                            setProfileStatus={props.setProfileStatus}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {useEffect} from \"react\";\r\nimport Profile from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {getProfileStatusTC, getUserProfileTC, setProfileStatusAC, updateStatusTC} from \"../../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {ProfileType} from \"../../../redux/store\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    meId: number | null\r\n    status: string\r\n}\r\n\r\ntype MapSDispatchPropsType = {\r\n    getUserProfileTC: (userId: string) => void\r\n    getProfileStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    setProfileStatusAC: (status: string) => void\r\n}\r\n\r\ntype ownPropsType = MapStatePropsType & MapSDispatchPropsType;\r\ntype PropsType = RouteComponentProps<PathParamsType> & ownPropsType\r\n\r\nfunction ProfileContainer(props: PropsType){\r\n\r\n\r\n    useEffect(() => {\r\n        let userId = props.match.params.userId ?? props.meId\r\n        if (!userId) {\r\n            props.history.push('/login')\r\n        }\r\n        props.getUserProfileTC(userId)\r\n        props.getProfileStatusTC(userId)\r\n    }, [\r\n        props.match.params.userId, props.meId\r\n    ]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Profile profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatusTC}\r\n                     setProfileStatus={props.setProfileStatusAC}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nlet WithUrlDataContainer = withRouter(ProfileContainer)\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    meId: state.auth.userId,\r\n    status: state.profilePage.status,\r\n})\r\n\r\n\r\n// export default withAuthRedirect(connect(mapStateToProps, {\r\n//     getUserProfileTC,\r\n// }) (WithUrlDataContainer));\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileTC,\r\n        getProfileStatusTC,\r\n        updateStatusTC,\r\n        setProfileStatusAC}\r\n    ),\r\n)(WithUrlDataContainer)"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","setProfileStatus","updateStatus","profile","className","s","photos","large","src","Preloader","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","postsElements","posts","map","p","id","AddMyPostFormRedux","onSubmit","values","addPost","newMessagePost","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","compose","connect","state","profilePage","dispatch","addPostAC","WithUrlDataContainer","withRouter","userId","match","params","meId","history","push","getUserProfileTC","getProfileStatusTC","updateStatusTC","setProfileStatusAC","auth"],"sourceRoot":""}