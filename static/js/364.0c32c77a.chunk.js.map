{"version":3,"file":"static/js/364.0c32c77a.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileInfo/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3wciT\",\"contact\":\"ProfileInfo_contact__vOSry\"};","import React, {useEffect, useState} from \"react\"\r\n\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    setProfileStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.setProfileStatus(status)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b> Status: </b> <span onDoubleClick={activateEditMode}> {props.status || \"Enter your status\"} </span>\r\n                </div>}\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>}\r\n        </div>)\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormControls/FormControls\";\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {ProfileType} from \"../../../redux/store\";\r\nimport s from \"./ProfileInfo.module.css\";\r\n\r\n\r\n\r\nexport type ProfileDataFormPropsType = {\r\n    onSubmit: any\r\n    profile: ProfileType\r\n    error: string | null\r\n}\r\n\r\n type OnSubmitType = {\r\n     [key: string]: any\r\n }\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<OnSubmitType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <button> save</button>\r\n        {props.error && <div>\r\n            {props.error}\r\n        </div>}\r\n        <div>\r\n            <b> Full name: </b> {createField(\"Full name\", Input, \"fullName\", [])}\r\n        </div>\r\n        <div>\r\n            <b> Looking for a job: </b> {createField(\"\", Input, \"lookingForAJob\", [], {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n            <b> Looking for a job description: </b> {createField(\"Looking for a job description\", Textarea , \"lookingForAJobDescription\", [])}\r\n        </div>\r\n        <div>\r\n            <b> My professional\r\n                skills: </b> {createField(\"My professional skills\", Textarea, \"MyProfessionalSkills\", [])}\r\n        </div>\r\n        <div>\r\n            <b> About me: </b> {createField(\"About me\", Textarea, \"AboutMe\", [])}\r\n        </div>\r\n        <div>\r\n            <b> Contacts: </b> {Object.keys(props.profile.contacts).map((key) => {\r\n            return <div key={key} className={s.descriptionBlock}>\r\n                <b> {key}:  {createField(key, Input, \"contacts.\" + key, [])} </b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<OnSubmitType, ProfileDataFormPropsType>({\r\n    form: 'edit-profile'\r\n})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import s from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/store\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport React, {useState} from \"react\";\r\nimport {ProfileDataFormPropsType} from \"./ProfileDataForm\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    setProfileStatus: (status: string) => void\r\n    isOwner: boolean\r\n    setPhotoTC: any\r\n    saveProfile: (formData: any) => any\r\n    error: string | null\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string | null\r\n    contactValue?: string | null\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: any\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.setPhotoTC(e.target.files[0])\r\n        }\r\n    }\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onSubmit = (formData: ProfileDataFormPropsType) => {\r\n        props.saveProfile(formData)\r\n            .then(()=>{\r\n                setEditMode(false)\r\n            })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <ProfileStatusWithHooks status={props.status}\r\n                                        updateStatus={props.updateStatus}\r\n                                        setProfileStatus={props.setProfileStatus}\r\n                />\r\n                {props.profile.photos.large ? <img src={props.profile.photos.large}/> : 'Нет фото'}\r\n                <div>\r\n                    {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n                </div>\r\n                {editMode ? <ProfileDataFormReduxForm initialValues={props.profile}\r\n                                                      onSubmit={onSubmit}\r\n                                                      profile={props.profile}\r\n                                                      error={props.error}\r\n                    />\r\n                    :\r\n                    <ProfileData profile={props.profile}\r\n                                 isOwner={props.isOwner}\r\n                                 goToEditMode={()=>{setEditMode(true)}}\r\n                    />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst ProfileData = (props: ProfileDataPropsType) => {\r\n\r\n    return <div>\r\n         {props.isOwner && <div> <button onClick={props.goToEditMode}> edit </button> </div>}\r\n        <div>\r\n            <b> fullName: </b> {props.profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b> lookingForAJob: </b> {props.profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n        </div>\r\n        {props.profile.lookingForAJob &&\r\n            <div>\r\n                <b> My professional skills: </b> {props.profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b> About me: </b> {props.profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b> Contacts: </b> {Object.keys(props.profile.contacts).map((key) => {\r\n            return <Contact key={key}\r\n                            contactTitle={key}\r\n                            contactValue={props.profile?.contacts[key as keyof typeof props.profile.contacts]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = (props: ContactPropsType) => {\r\n    return <div className={s.contact}>\r\n        <b> {props.contactTitle}:</b> {props.contactValue}\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__Qkg42\"};","import s from './Post.module.css';\r\n\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://cdn1.flamp.ru/489671bbc112e7621d7d9f013bbb8a49_100_100.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span> like </span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__q4d-u\",\"posts\":\"MyPosts_posts__aTeRb\"};","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.css'\r\nimport {PostType} from '../../../redux/store'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/required\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\ntype MyPostType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: (newMessagePost: string) => void\r\n    posts: Array<PostType>\r\n    newPostText: string\r\n}\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\n\r\n// Но с коннектом в Реакт Мемо нет необходимости, т.к. это в этом случае делает сам Реакт.\r\n\r\nconst MyPosts = React.memo((props: MyPostType) => {\r\n    let postsElements =\r\n        props.posts.map(p => <Post id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let addPost = (values: any) => {\r\n        props.addPost(values.newMessagePost);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3> My posts </h3>\r\n\r\n            <AddMyPostFormRedux onSubmit={addPost}/>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst AddMyPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newMessagePost\" component={Textarea} placeholder=\"Enter your post message\"\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button> Add post </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm({form: \"postAddMessageForm\"})(AddMyPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n// const MyPostsContainer = () => {\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//\r\n//                     let addPost = () => {\r\n//                         store.dispatch(addPostAC());\r\n//                     }\r\n//\r\n//                     let onPostChange = (text: string) => {\r\n//                         let action = changeNewTextAC(text)\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts updateNewPostText={onPostChange}\r\n//                              addPost={addPost}\r\n//                              posts={store.getState().profilePage.posts}\r\n//                              newPostText={store.getState().profilePage.newPostText}\r\n//                     /> }\r\n//                 }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\n// Все выше переделано на тоже самое, что ниже:\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newMessagePost: string) => {\r\n            dispatch(addPostAC(newMessagePost));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = compose<React.FC>(connect(mapStateToProps, mapDispatchToProps))(MyPosts)\r\n\r\nexport default MyPostsContainer;","import ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {ProfileType} from '../../redux/store';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    setProfileStatus: (status: string) => void\r\n    isOwner: boolean\r\n    setPhotoTC: any\r\n    saveProfile: () => void\r\n    error: string | null\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo    profile={props.profile}\r\n                            status={props.status}\r\n                            updateStatus={props.updateStatus}\r\n                            setProfileStatus={props.setProfileStatus}\r\n                            isOwner={props.isOwner}\r\n                            setPhotoTC={props.setPhotoTC}\r\n                            saveProfile={props.saveProfile}\r\n                            error={props.error}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React, {useEffect} from \"react\";\r\nimport Profile from \"../Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\nimport {\r\n    getProfileStatusTC,\r\n    getUserProfileTC,\r\n    setPhotoTC, saveProfile,\r\n    setProfileStatusAC,\r\n    updateStatusTC\r\n} from \"../../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {ProfileType} from \"../../../redux/store\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    meId: number | null\r\n    status: string\r\n    error: string | null\r\n}\r\n\r\ntype MapSDispatchPropsType = {\r\n    getUserProfileTC: (userId: string) => void\r\n    getProfileStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    setProfileStatusAC: (status: string) => void\r\n    setPhotoTC: any\r\n    saveProfile: () => void\r\n}\r\n\r\ntype ownPropsType = MapStatePropsType & MapSDispatchPropsType;\r\ntype PropsType = RouteComponentProps<PathParamsType> & ownPropsType\r\n\r\nfunction ProfileContainer(props: PropsType){\r\n\r\n\r\n    useEffect(() => {\r\n        let userId = props.match.params.userId ?? props.meId\r\n        if (!userId) {\r\n            props.history.push('/login')\r\n        }\r\n        props.getUserProfileTC(userId)\r\n        props.getProfileStatusTC(userId)\r\n    }, [\r\n        props.match.params.userId, props.meId\r\n    ]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Profile profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatusTC}\r\n                     setProfileStatus={props.setProfileStatusAC}\r\n                     isOwner={!props.match.params.userId}\r\n                     setPhotoTC={props.setPhotoTC}\r\n                     saveProfile={props.saveProfile}\r\n                     error={props.error}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nlet WithUrlDataContainer = withRouter(ProfileContainer)\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    meId: state.auth.userId,\r\n    status: state.profilePage.status,\r\n    error: state.profilePage.error\r\n})\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileTC,\r\n        getProfileStatusTC,\r\n        updateStatusTC,\r\n        setProfileStatusAC,\r\n        setPhotoTC,\r\n        saveProfile,\r\n        }\r\n    ),\r\n)(WithUrlDataContainer)"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","setProfileStatus","updateStatus","reduxForm","form","onSubmit","handleSubmit","error","createField","Input","type","Textarea","Object","keys","profile","contacts","map","key","className","s","ProfileData","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","photos","large","src","target","files","length","setPhotoTC","initialValues","formData","saveProfile","then","Preloader","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","postsElements","posts","p","id","AddMyPostFormRedux","values","addPost","newMessagePost","Field","name","component","placeholder","validate","required","compose","connect","state","profilePage","dispatch","addPostAC","WithUrlDataContainer","withRouter","userId","match","params","meId","history","push","getUserProfileTC","getProfileStatusTC","updateStatusTC","setProfileStatusAC","auth"],"sourceRoot":""}