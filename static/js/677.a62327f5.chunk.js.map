{"version":3,"file":"static/js/677.a62327f5.chunk.js","mappings":"yKACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,6BCiBhL,EAVmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACQ,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,cAAqBD,EAAMM,KAA3B,UCEhB,EAPgB,SAACN,GACb,OACI,iBAAKG,UAAWC,EAAAA,OAAhB,cAA4BJ,EAAMO,QAAlC,Q,uCCSJC,GAAcC,EAAAA,EAAAA,GAAiB,IAgD7BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAfL,SAACX,GACpB,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOT,KAAK,iBAAiBU,UAAWC,EAAAA,GAAUC,YAAY,oBACtDC,SAAU,CAACC,EAAAA,EAAUZ,QAGjC,0BACI,+CAQhB,EAhDgB,SAACR,GAEbqB,QAAQC,IAAItB,GACZ,IAAIuB,EAAQvB,EAAMwB,YAElBH,QAAQC,IAAIC,GACZ,IAAIE,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAuB1B,GAAI0B,EAAE1B,GAAII,KAAMsB,EAAEtB,MAAxBsB,EAAE1B,OAC5D2B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoBxB,QAASwB,EAAExB,SAAjBwB,EAAE7B,OAS/D,OACI,iBAAKC,UAAWC,EAAAA,QAAhB,WACA,gBAAKD,UAAWC,EAAAA,aAAhB,SACKqB,KAED,iBAAKtB,UAAWC,EAAAA,SAAhB,WACI,yBACKyB,KAEL,SAACnB,EAAD,CAAqBG,SAbX,SAACmB,GACnBhC,EAAMiC,YAAYD,EAAOE,0B,+DCxB3BC,EAAkB,SAACZ,GACrB,MAAO,CACHa,OAAQb,EAAMc,KAAKD,SCD3B,IDKoCE,ECapC,GDboCA,GCWMC,EAAAA,EAAAA,KAAkBC,EAAAA,EAAAA,KAhBtC,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBY,OAAQb,EAAMc,KAAKD,WAIF,SAACK,GACtB,MAAO,CACHR,YAAa,SAACC,GACVO,GAASC,EAAAA,EAAAA,GAAcR,SAMOK,CAAgEI,IDHrEH,EAAAA,EAAAA,IAAQL,EAARK,EANP,SAACxC,GACvB,IAAKoC,EAAwBpC,EAAxBoC,OAAWQ,GAAhB,OAA6B5C,EAA7B,GACA,OAAKoC,GACE,SAACE,GAAD,UAAgBM,KADH,SAAC,KAAD,CAAUvC,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Swd9K\",\"dialogsItems\":\"Dialogs_dialogsItems__-4gUB\",\"active\":\"Dialogs_active__k6b9F\",\"messages\":\"Dialogs_messages__-m4ya\",\"message\":\"Dialogs_message__VLdOA\"};","import { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype DialogPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n            <div className={s.dialog + ' ' + s.active}>\r\n                <NavLink to={path}> {props.name} </NavLink>\r\n            </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DialogItem;","import s from './../Dialogs.module.css';\r\nimport { ActionsType } from '../../../redux/store';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.dialog}> {props.message} </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import s from './Dialogs.module.css';\r\nimport React from 'react'\r\nimport DialogItem from './DialogItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {DialogPageType} from \"../../redux/store\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from './../common/FormControls/FormControls'\r\nimport {maxLengthCreator, required} from \"./../../utils/validators/required\";\r\n\r\n\r\ntype DialogsType = {\r\n    updateNewMessageBodyAC: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nconst Dialogs = (props: DialogsType) => {\r\n\r\n    console.log(props)\r\n    let state = props.dialogsPage\r\n\r\n    console.log(state)\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name} /> )\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message} /> )\r\n\r\n\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"}/>\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n        <div className={s.dialogsItems}>\r\n            {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>\r\n                    {messagesElements}\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AddMessageForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newMessageBody\" component={Textarea} placeholder=\"Enter you message\"\r\n                        validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button> send </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component  {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","import React from 'react'\r\nimport { sendMessageAC } from '../../redux/dialogs-reducer';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst DialogsContainer = withAuthRedirect(compose<React.FC>(connect(mapStateToProps, mapDispatchToProps))(Dialogs));\r\n\r\nexport default DialogsContainer;"],"names":["props","path","id","className","s","to","name","message","maxLength10","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","console","log","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","mapStateToProps","isAuth","auth","Component","compose","connect","dispatch","sendMessageAC","Dialogs","restProps"],"sourceRoot":""}